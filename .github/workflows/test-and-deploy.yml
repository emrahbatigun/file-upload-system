name: Test and Deploy

on:
  push:
    branches:
      - main

jobs:
  test_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_ENCRYPTION_TYPE: ${{ secrets.AWS_ENCRYPTION_TYPE }}
          AWS_ENCRYPTION_KEY_ID: ${{ secrets.AWS_ENCRYPTION_KEY_ID }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          SSL_PATH: ${{ secrets.SSL_PATH }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          pytest

      - name: Install SSH key
        if: success()
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.AWS_INSTANCE_SSH_KEY }}

      - name: Deploy to AWS
        if: success()
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
            set -e # Exit immediately if a command exits with a non-zero status
            cd /home/$SERVER_USER/file-upload-system

            git pull https://${{ secrets.GH_USERNAME }}:${{ secrets.GH_TOKEN }}@github.com/emrahbatigun/file-upload-system.git main

            if [ $? -ne 0 ]; then
              echo "Git pull failed. Aborting deployment."
              exit 1
            fi

            echo "Building Docker containers without cache..."
            docker-compose build --no-cache

            echo "Restarting Docker containers..."
            docker-compose up -d

            docker image prune -f
          EOF
